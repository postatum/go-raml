// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.
package theclient

import (
	"encoding/json"
	"net/http"

	"examples.com/theclient/goraml"
	file_type_types "examples.com/theclient/libraries/filelib/file_type/types"
	"examples.com/theclient/types"
)

type ConfigsService service

// get config files
func (s *ConfigsService) ConfigsGet(headers, queryParams map[string]interface{}) (file_type_types.File, *http.Response, error) {
	var err error
	var respBody201 file_type_types.File

	resp, err := s.client.doReqNoBody("GET", s.client.BaseURI+"/configs", headers, queryParams)
	if err != nil {
		return respBody201, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 201:
		err = json.NewDecoder(resp.Body).Decode(&respBody201)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody201, resp, err
}

func (s *ConfigsService) ConfigsPost(headers, queryParams map[string]interface{}) (types.Place, *http.Response, error) {
	var err error
	var respBody201 types.Place

	resp, err := s.client.doReqWithBody("POST", s.client.BaseURI+"/configs", nil, headers, queryParams)
	if err != nil {
		return respBody201, nil, err
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case 201:
		err = json.NewDecoder(resp.Body).Decode(&respBody201)
	default:
		err = goraml.NewAPIError(resp, nil)
	}

	return respBody201, resp, err
}

func (s *ConfigsService) ConfigsPut(headers, queryParams map[string]interface{}) (*http.Response, error) {
	var err error

	resp, err := s.client.doReqWithBody("PUT", s.client.BaseURI+"/configs", nil, headers, queryParams)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	return resp, err
}
