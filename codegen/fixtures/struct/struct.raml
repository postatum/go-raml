#%RAML 1.0
title: Struct API Test
mediaType: application/json
types:
  EnumCity:
    description: |
      first line
      second line
      third line
    properties:
      name: string
      enum_parks:
        type: string
        enum: [ park_a, park_b ]
      enum_homeNum:
        type: integer
        enum: [ 1, 2, 3 ]
  animal:
    description: |
      Animal represent animal object.
      It contains field that construct animal
      such as : name, colours, and cities.
    type: object
    properties:
      name?: string
      colours:
        type: array
        items: string
      cities:
        type: EnumCity[]
        minItems: 1
        maxItems: 10
  Cage:
    description: |
      Animal's cage
    type: object
    properties:
      owner:
        type: animal
      colours:
        type: string

  SingleInheritance:
    type: animal
    properties:
      name:
        type: string
      single:
        type: boolean
  Dashed:
    properties:
      Dashed-field:
        type: string
  PlainObject:
    description: test plain object property
    properties:
      obj:
        type: object
  
  NumberFormat:
    description: test number format
    properties:
      i8:
        type: integer
        format: int8
      i16:
        type: integer
        format: int16
      i32:
        type: integer
        format: int32
      i64:
        type: integer
        format: int64
      i:
        type: integer
        format: int
      l:
        type: integer
        format: long
      f:
        type: number
        format: float
      d:
        type: number
        format: double
      num:
        type: number

  Cat:
    properties:
      kind:
        type: string
  MultipleInheritance:
    type: [ animal , Cat ]
    properties:
      color:
        type: string
  ArrayOfCats:
    type: Cat[]
    minItems: 1
    maxItems: 4
    uniqueItems: true
  BidimensionalArrayOfCats:
    type: Cat[][]
  EnumString:
    type: string
    enum: [ str_a, str_b, 1string, string.one-two ]
  Pet:
    type: Cat | animal
    #discriminator: kind
  ArrayOfPets:
    type: (Cat | animal)[]
  Specialization:
    type: number
    minimum: 0
  petshop:
    properties:
      name:
        type: string
      cats:
        type: Cat[]
  ValidationString:
    properties:
      name:
        type: string
        minLength: 8
        maxLength: 40
  WithDateTime:
    properties:
      name:
        type: string
      birth:
        type: datetime
  Tree:
    properties:
      name: string
      right: Tree
  
  leaf:
    description:  recursive type with small character
    properties:
      right: leaf

  AliasBuiltin:
    description: alias of builtin type
    type: string
  Alias:
    description: alias of another type
    type: animal

  Animal#2.0:
    description: type with special characters
    type: animal

  file:
    description: types with same name as RAML scalar type
    properties:
      name: string
  
  dir:
    description: types which have properties with RAML scalar type as it's name
    properties:
      files: file[]
      animals:
        type: animal[]
        required: false
      animal:
        type: animal
        required: false


/users:
  post:
    description: create a user
    body:
      application/json:
        type: object
        properties:
          age:
            type: integer
            minimum: 16
            maximum: 100
            multipleOf: 4
          ID:
            type: string
            minLength: 4
            maxLength: 8
          item:
            minLength: 2
            pattern: ^[a-zA-Z]+$
          grades:
            type: integer[]
            minItems: 2
            maxItems: 5
            uniqueItems: true
  /{id}:
    put:
      body:
        application/json:
          type: [Cat, animal]
      responses:
        200:
          body:
            application/json:
              type: Cat | animal
    get:
      description: |
        get id of users.
        This method will be return single user object.
        Replace ID with user defined field.
      responses:
        200:
          body:
            application/json:
              properties:
                age: integer
                ID:

