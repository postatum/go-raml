{{- define "class_python" -}}
# DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

"""
Auto-generated class for {{.Name}}
"""
{{- if .Capnp}}
import capnp
import os
{{- end }}
{{range $k, $v := .Imports -}}
{{$v}}
{{end}}
from . import client_support

{{- if .Capnp }}

dir = os.path.dirname(os.path.realpath(__file__))
{{- end }}


class {{.Name}}(object):
    """
    auto-generated. don't touch.
    """

    @staticmethod
    def create(**kwargs):
        """
        {{ range $key, $val := .Fields -}}
        :type {{$val.Name}}: {{if $val.IsList}}list[{{$val.DataType}}]{{else}}{{$val.DataType}}{{end}}
        {{ end -}}
        :rtype: {{.Name}}
        """

        return {{.Name}}(**kwargs)

    def __init__(self, json=None, **kwargs):
        if json is None and not kwargs:
            raise ValueError('No data or kwargs present')

        class_name = '{{.Name}}'
        data = json or kwargs

        # set attributes

        {{- range $key, $val := .Fields }}
        {{ if $val.HasChildProperties -}}
        data_types = { {{.DataType}} }
        {{- else -}}
        data_types = [{{.DataType}}]
        {{- end }}
        self.{{$val.Name}} = client_support.set_property('{{$val.Name}}', data, data_types, {{if $val.HasChildProperties}}True{{else}}False{{end}}, {{ $val.RequiredChildProperties }}, {{if $val.IsList}}True{{else}}False{{end}}, {{if $val.Required}}True{{else}}False{{end}}, class_name)

        {{- end }}

    def __str__(self):
        return self.as_json(indent=4)

    def as_json(self, indent=0):
        return client_support.to_json(self, indent=indent)

    def as_dict(self):
        return client_support.to_dict(self)
{{- if .Capnp}}

    def to_capnp(self):
        """
        Load the class in capnp schema {{.CapnpName}}.capnp
        :rtype bytes
        """
        template = capnp.load('%s/{{.CapnpName}}.capnp' % dir)
        return template.{{.CapnpName}}.new_message(**self.as_dict()).to_bytes()


class {{.Name}}Collection:
    """
    auto-generated. don't touch.
    """

    @staticmethod
    def new(binary=None):
        """
        Load the binary of {{.CapnpName}}.capnp into class {{.Name}}
        :type binary: bytes. If none creates an empty capnp object.
        rtype: {{.Name}}
        """
        template = capnp.load('%s/{{.CapnpName}}.capnp' % dir)
        struct = template.{{.CapnpName}}.from_bytes(binary) if binary else template.{{.CapnpName}}.new_message()
        return {{.Name}}(**struct.to_dict(verbose=True))
{{- end}}
{{ end -}}
