{{- define "client_service_go" -}}
// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.
package {{.PackageName}}

{{$serviceiName := .Name}}
import (
	{{ if .NeedImportJSON}}"encoding/json"{{end}}
	"net/http"

    {{ range $k, $v := .Imports -}}
     {{$v}}
    {{end -}}
)

type {{.Name}} service


{{ range $k, $v := .Methods }}
{{ range $kf, $vf := $v.FuncComments }}
// {{$vf}} {{end}}
func (s *{{$serviceiName}}) {{$v.MethodName}}({{$v.Params}}){{$v.ReturnTypes}} {
		var err error
		{{ range $k, $resp := $v.SuccessRespBodyTypes }}var respBody{{$resp.Code}} {{$resp.Type}}
		{{ end }}

    	{{ if or (eq $v.Verb "GET") (eq $v.Verb "DELETE") }}
        resp, err := s.client.doReqNoBody("{{$v.Verb}}", s.client.BaseURI {{$v.Route}}, headers, queryParams)
		{{- else }}
        resp, err := s.client.doReqWithBody("{{$v.Verb}}", s.client.BaseURI {{$v.Route}}, {{if ne $v.ReqBody ""}}&body{{else}}nil{{end}}, headers, queryParams)
		{{- end }}
		if err != nil {
			return {{ range $k, $resp := $v.SuccessRespBodyTypes }}respBody{{$resp.Code}}, {{ end }} nil, err
		}
		defer resp.Body.Close()
		
		{{ if $v.HasRespBody }}
		switch resp.StatusCode {
		{{- range $k, $resp := $v.SuccessRespBodyTypes }}
			case {{$resp.Code}}:
			err = json.NewDecoder(resp.Body).Decode(&respBody{{$resp.Code}})
		{{- end}}
		{{- range $k, $resp := $v.FailedRespBodyTypes }}
			case {{$resp.Code}}:
			var respBody{{$resp.Code}} {{$resp.Type}}
			err = goraml.NewAPIError(resp, &respBody{{$resp.Code}})
		{{- end}}
			default:
				err = goraml.NewAPIError(resp, nil)
		}
		{{end}}

		return {{ range $k, $resp := $v.SuccessRespBodyTypes }}respBody{{$resp.Code}}, {{ end }} resp, err
}
{{- end -}}

{{- end -}}
